# Printing arrays: last trailing semicolon is optional

## The "v" box
```
[
  Foo;
  Baz;
  Bar;
  Qux;
  Quux;
  Quuz;
  Corge;
  Grault;
  Garply;
]
```

## The "b" box
```
[
  Foo; Baz; Bar; Qux; Quux;
  Quuz; Corge; Grault; Garply;
]
```

## The "h" box
```
[Foo; Baz; Bar; Qux; Quux; Quuz; Corge; Grault; Garply]
```

## The "hv" box
```
[
  Foo;
  Baz;
  Bar;
  Qux;
  Quux;
  Quuz;
  Corge;
  Grault;
  Garply;
]
```

## The "hov" box
```
[
  Foo; Baz; Bar; Qux; Quux;
  Quuz; Corge; Grault; Garply;
]
```

# Printing statements: terminator is optional after newline

## The "v" box
```
{
  Foo
  Baz
  Bar
  Qux
  Quux
  Quuz
  Corge
  Grault
  Garply
}
```

## The "b" box
```
{
  Foo; Baz; Bar; Qux; Quux
  Quuz; Corge; Grault; Garply
}
```

## The "h" box
```
{Foo; Baz; Bar; Qux; Quux; Quuz; Corge; Grault; Garply}
```

## The "hv" box
```
{
  Foo
  Baz
  Bar
  Qux
  Quux
  Quuz
  Corge
  Grault
  Garply
}
```

## The "hov" box
```
{
  Foo; Baz; Bar; Qux; Quux
  Quuz; Corge; Grault; Garply
}
```

# Printing function: first pipe character is optional

## The "v" box
```
function
| Foo -> ()
| Baz -> ()
| Bar -> ()
| Qux -> ()
| Quux -> ()
| Quuz -> ()
| Corge -> ()
| Grault -> ()
| Garply -> ()
```

## The "b" box
```
function Foo -> ()
| Baz -> () | Bar -> ()
| Qux -> () | Quux -> ()
| Quuz -> () | Corge -> ()
| Grault -> () | Garply -> ()
```

## The "h" box
```
function Foo -> () | Baz -> () | Bar -> () | Qux -> () | Quux -> () | Quuz -> () | Corge -> () | Grault -> () | Garply -> ()
```

## The "hv" box
```
function
| Foo -> ()
| Baz -> ()
| Bar -> ()
| Qux -> ()
| Quux -> ()
| Quuz -> ()
| Corge -> ()
| Grault -> ()
| Garply -> ()
```

## The "hov" box
```
function Foo -> ()
| Baz -> () | Bar -> ()
| Qux -> () | Quux -> ()
| Quuz -> () | Corge -> ()
| Grault -> () | Garply -> ()
```

# Haskell do-notation

## The "v" box
```
do Foo
   Baz
   Bar
   Qux
   Quux
   Quuz
   Corge
   Grault
   Garply
```

## The "b" box
```
do {Foo; Baz; Bar; Qux; Quux;
   Quuz; Corge; Grault;
   Garply}
```

## The "h" box
```
do {Foo; Baz; Bar; Qux; Quux; Quuz; Corge; Grault; Garply}
```

## The "hv" box
```
do Foo
   Baz
   Bar
   Qux
   Quux
   Quuz
   Corge
   Grault
   Garply
```

## The "hov" box
```
do {Foo; Baz; Bar; Qux; Quux;
   Quuz; Corge; Grault;
   Garply}
```

# Example from ocamlformat

## The "v" box
```
( Foo
+ Baz
+ Bar
+ Qux
+ Quux
+ Quuz
+ Corge
+ Grault
+ Garply )
```

## The "b" box
```
( Foo + Baz + Bar + Qux
+ Quux + Quuz + Corge
+ Grault + Garply )
```

## The "h" box
```
Foo + Baz + Bar + Qux + Quux + Quuz + Corge + Grault + Garply
```

## The "hv" box
```
( Foo
+ Baz
+ Bar
+ Qux
+ Quux
+ Quuz
+ Corge
+ Grault
+ Garply )
```

## The "hov" box
```
( Foo + Baz + Bar + Qux
+ Quux + Quuz + Corge
+ Grault + Garply )
```

